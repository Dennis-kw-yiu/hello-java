---
# Declare the resources that will be used in the pipeline
# Each resource has a name
resources:
- name: git
  icon: github
  type: git
  source:
    uri: https://github.com/monodot/hello-java
    branch: master
- name: hello-java-image
  type: registry-image
  icon: docker
  source:
    repository: ((image-name))
    username: ((registry-username))
    password: ((registry-password))
    tag: latest

# A pipeline has 1 or more Jobs
# Each Job is composed of a series of Tasks
# e.g. "build-app" -> "build", "create-image", etc.
jobs:

# This test job will fetch the source code from GitHub,
# Then execute the 'test' task which is defined separately in the repository.
- name: unit-test
  plan:
  - get: git
    trigger: true # Trigger this job whenever 'hello-java-code' has a new version (i.e. a new Git commit)
  - task: run-unit-tests
    file: src/ci/concourse/tasks/unit-test.yml

# This build job will fetch the source code,
# then execute a 'build' task which is defined separately in the repository.
- name: package-and-push
  plan:
  - task: maven-package
    # passed:
    # - unit-test  # The 'unit-test' job must have passed for this job to execute
    file: src/ci/concourse/tasks/maven-package.yml
  # Take the image built in the previous task and push it to a Docker registry
  - put: hello-java-image
    params: {image: image/hello-java.tar}
